import string

def generate_playfair_matrix(keyword):
    """
    Generates the Playfair matrix using the given keyword.
    """
    alphabet = string.ascii_uppercase.replace('J', '')  # Remove 'J' to make alphabet 25 letters
    matrix = []
    keyword = ''.join(dict.fromkeys(keyword.upper()))  # Remove duplicates from keyword

    for char in keyword + alphabet:
        if char not in matrix and char != 'J':
            matrix.append(char)

    playfair_matrix = [matrix[i:i+5] for i in range(0, 25, 5)]
    return playfair_matrix

def find_position(matrix, char):
    """
    Finds the position (row, col) of a character in the Playfair matrix.
    """
    for i in range(5):
        for j in range(5):
            if matrix[i][j] == char:
                return i, j

def encrypt_playfair(plaintext, matrix):
    """
    Encrypts plaintext using the Playfair cipher with the given matrix.
    """
    plaintext = plaintext.upper().replace('J', 'I')  # Replace 'J' with 'I' and convert to uppercase
    ciphertext = ''

    for i in range(0, len(plaintext), 2):
        char1 = plaintext[i]
        char2 = plaintext[i + 1] if i + 1 < len(plaintext) else 'X'  # Append 'X' if odd number of characters

        row1, col1 = find_position(matrix, char1)
        row2, col2 = find_position(matrix, char2)

        if row1 == row2:  # Same row
            ciphertext += matrix[row1][(col1 + 1) % 5] + matrix[row2][(col2 + 1) % 5]
        elif col1 == col2:  # Same column
            ciphertext += matrix[(row1 + 1) % 5][col1] + matrix[(row2 + 1) % 5][col2]
        else:  # Form a rectangle
            ciphertext += matrix[row1][col2] + matrix[row2][col1]

    return ciphertext

def main():
    keyword = input("Enter the keyword: ")
    plaintext = input("Enter the plaintext: ")

    matrix = generate_playfair_matrix(keyword)
    ciphertext = encrypt_playfair(plaintext, matrix)
    
    print("Encrypted text:", ciphertext)

if __name__ == "__main__":
    main()
