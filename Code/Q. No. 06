def break_affine_cipher(ciphertext):
    """
    Attempts to break the affine cipher given the ciphertext.
    """
    freq = frequency_analysis(ciphertext)
    
    if len(freq) < 2:
        print("Error: Not enough characters in the ciphertext for frequency analysis.")
        return None, None
    
    most_common = freq[0][0]
    second_most_common = freq[1][0]

    # Assuming the most frequent letter corresponds to 'B' and the second most frequent to 'U'
    # We find the key (a, b) using these assumptions
    a = (ord('U') - ord('B')) * mod_inverse(ord(most_common) - ord(second_most_common), 26) % 26
    b = (ord(most_common) - ord('A') - a * (ord('B') - ord('A'))) % 26

    return a, b

def main():
    ciphertext = input("Enter the ciphertext: ")

    a, b = break_affine_cipher(ciphertext)
    if a is None or b is None:
        return
    
    print("The key (a, b) is:", (a, b))

    plaintext = decrypt_affine_cipher(ciphertext, a, b)
    print("Decrypted text:", plaintext)

if __name__ == "__main__":
    main()
